package com.nicht.promote.DataStruct_Algorithrem.src.Algorithrem.Leetcode.newCoder;

//有些数的素因子只有 3，5，7，请设计一个算法找出第 k 个数。注意，不是必须有这些素因子，而是必须不包含其他的素因子。例如，前几个数按顺序应该是 1，3，
//5，7，9，15，21。
//
// 示例 1:
//
// 输入: k = 5
//
//输出: 9
//
//
// Related Topics 哈希表 数学 动态规划 堆（优先队列） 👍 146 👎 0

import cn.hutool.http.HttpUtil;
import com.alibaba.fastjson.JSON;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;

import java.util.*;

/**
 * @Description
 * @Date 2022/9/28
 */
public class getKthMagicNumber {

    public static void main(String[] args) {



//        String   phones = "13911559800,13951859939,13616726818,13965141388,13914760179,13801509096,13816319777,18734385318,18851984925,13305753169,19923806900,18950449738,13716863222,13009600230,18645340377,13869889826,13801977702,13019809257,18017898572,13571627890,13939131317,13404369464,18648539619,13964076689,13141003346,15838818168,15879101031,18562526122,15831125636,13611592674,13992982999,13451179150,13611171091,13691289869,13904658963,18608986185,18690271878,13914457040,15221918288,13304015157,13985770247,13795177580,13892479723,18918129796,15541666811,18121024202,13579636999,13422056024,17770422099,13393416679,13920290091,13335393267,13718538193,18799701975,13995402081,13905526994,15065872885,15618283300,15062813887,18307051390,13816365965,18001871758,13982277882,13950317555,13312602427,18918630417,13379758152,13899085253,13906813753,13778321822,13985442408,13873892848,13808364218,13521394520,13911075848,13962606086,13865118177,13716609545,13901873750,13971417455,13702833636,15804186593,13320996313,13601901300,15160890155\n" +
//                "18047102211,15065183357,13301222923,13803286103,15558506777,13721242100,15911645501,13901304616,13991896785,18615597895,13916561774";


        String phones = "15995980058,13851968726,13585169738,13920811456,13918336975,18918902295,18600843551,13914541008,13818910520,13331863654,13817823294,15961492929,13868586666,15921701018,13138116508,15305510107,18611361154,13330967258,13302016809,15504485222,13817889805,15310860006,18951688269,13523605579,13972229688,13652098638,15318867205,13812692602,13813989377,13611286388,13512285368,18015501239,13703938211,18688377017,13600186808,18683713989,13917252560,13652428889,15195126623,18665741133,13505157766,18121368911,18986768100,13761149268,13940505150,18158139358,15150500223,13331809238,13918838092,13764986396,13681050965,13296609517,17760651612,13979117982,13852035126,18018663938,13323498476,15055003613,18951677605,18507174488,18005505288,13916236458,13681106906,15201304049,18094242656,15201831237,13661199334,13906560091,13838152028,13002222788,13101618987,13811100781,13773388917,13822477888,13646387800,13758133946,13770661287,13537219847,13421475637,18951755335,18618428126,18096060633,13989850203,13962183473,13761305198,13996172627,13634347732,13707279068,13664612191,13878102256,18650306626,13683615804,18603523521,13960870641,13621270502,13821187910,18698802668,13933017191,13813411058,18516287888,13601846858,13801643979,13813910022,15898212666,15850182963,13651263400,13687368546,15601054798,15572223337,18205956505,13564321900,13799982511,13851825609,13917914697,13174899752,18017001085,13885142218,13813845694,13561081266,13186970979,13857602432,13999890340,13911297447,18186875833,13954662651,18681835955,13269197930,13915962517,13823684593,15358159392,13797092251,18610613407,18705661335,15098815711,13813997600,13813371468,18069835220,13913892604,13905140973,13681736513,15801606838,13636629596,15906589859,18758809528,13917593503,13764131912,18245012010,13622053406,17624222508,15068158392,13357913675,13601453777,18927694181,13918220296,13591971986,13611573323,18960951617,13094809999";
        List<String> phoneList = Arrays.asList(phones.split(","));
        Map<String,Object> params = Maps.newHashMap();
        params.put("status",0);
        params.put("custId",0);
        params.put("sourceType",42);
        for (String num : phoneList) {
            params.put("phone_num",num);
           String res =  HttpUtil.post("http://crm.tuniu.org/muses-web-site/phone/insertPhoneNum.htm", JSON.toJSONString(params));
           System.out.println(  "add.tel="+num+",response="+res);
        }

//        List<List<String>> countryList = Lists.partition(phoneList,20);
//        List<String>  type = Arrays.asList("10","11","12","14","16","9");
//        for (int i = 0; i < countryList.size() ; i++) {
//            String sourceType = type.get(i);
//            Map<String,Object> params = Maps.newHashMap();
//            params.put("status",0);
//            params.put("custId",0);
//            params.put("sourceType",sourceType);
//            for (String num : countryList.get(i)) {
//                params.put("phone_num",num);
//                HttpUtil.post("http://crm.tuniu.org/muses-web-site/phone/insertPhoneNum.htm", JSON.toJSONString(params)
//                );
//            }
//        }

    }
    public int getKthMagicNumber(int k) {
        String s = null;
        PriorityQueue<Integer>  priorityQueue = new PriorityQueue<>(new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                return o1;
            }
        });
    return  0;
    }
    

   
}
