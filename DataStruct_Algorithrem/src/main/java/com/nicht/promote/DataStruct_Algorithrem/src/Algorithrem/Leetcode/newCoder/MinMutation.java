package com.nicht.promote.DataStruct_Algorithrem.src.Algorithrem.Leetcode.newCoder;

/**
 * 功能描述：
 *
 * @author nicht
 */
//基因序列可以表示为一条由 8 个字符组成的字符串，其中每个字符都是 'A'、'C'、'G' 和 'T' 之一。
//
// 假设我们需要调查从基因序列 start 变为 end 所发生的基因变化。一次基因变化就意味着这个基因序列中的一个字符发生了变化。
//
//
// 例如，"AACCGGTT" --> "AACCGGTA" 就是一次基因变化。
//
//指南
// 另有一个基因库 bank 记录了所有有效的基因变化，只有基因库中的基因才是有效的基因序列。
//
// 给你两个基因序列 start 和 end ，以及一个基因库 bank ，请你找出并返回能够使 start 变化为 end 所需的最少变化次数。如果无法完成
//此基因变化，返回 -1 。
//
// 注意：起始基因序列 start 默认是有效的，但是它并不一定会出现在基因库中。
//
//
//
// 示例 1：
//
//
//输入：start = "AACCGGTT", end = "AACCGGTA", bank = ["AACCGGTA"]
//输出：1
//
//
// 示例 2：
//
//
//输入：start = "AACCGGTT", end = "AAACGGTA", bank = ["AACCGGTA","AACCGCTA",
//"AAACGGTA"]
//输出：2
//
//
// 示例 3：
//
//
//输入：start = "AAAAACCC", end = "AACCCCCC", bank = ["AAAACCCC","AAACCCCC",
//"AACCCCCC"]
//输出：3
//
//
//
//
// 提示：
//
//
// start.length == 8
// end.length == 8
// 0 <= bank.length <= 10
// bank[i].length == 8
// start、end 和 bank[i] 仅由字符 ['A', 'C', 'G', 'T'] 组成
//
// Related Topics 广度优先搜索 哈希表 字符串 👍 166 👎 0

public class MinMutation {
    public static void main(String[] args) {
        System.out.println(Long.getLong("122"));
    }
//127928,127929,127934,127939,127943,127947,127960,127962,127965,127970,127971,127972,127973,127974,127976,127977,127978,127980,127981,127984,127990,127994,127995,127998,127999,128000,128002,128003,128005,128006,128007,128009,128010,128014,128016,128018,128019,128020,128021,128023,128024,128025,128026,128027,128028,128029,128030,128031,128032,128033,128034,128036,128037,128038,128042,128043,128045,128046,128047,128049,128051,128054,128055,128057,128058,128059,128060,128061,128062,128063,128064,128065,128066,128067,128068,128070,128071,128072,128073,128074,128075,128076,128077,128078,128079,128080,128081,128082,128083,128085,128086,128087,128088,128089,128090,128091,128092,128093,128094,128095,128096,128098,128099,128100,128101,128102,128104,128105,128106,128107,128108
}
